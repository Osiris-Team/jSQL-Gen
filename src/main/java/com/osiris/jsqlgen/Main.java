package com.osiris.jsqlgen;

import com.osiris.jsqlgen.generator.GetTableChange;
import com.osiris.jsqlgen.generator.JavaCodeGenerator;
import com.osiris.jsqlgen.model.Column;
import com.osiris.jsqlgen.model.Database;
import com.osiris.jsqlgen.model.Table;
import com.osiris.jsqlgen.model.TableChange;

import java.io.File;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class Main {
    public static File dir = new File(System.getProperty("user.home") + "/jSQL-Gen");
    public static File generatedDir = new File(Main.dir + "/generated");
    public static AtomicInteger idCounter = new AtomicInteger(new Config().idCounter.asInt());

    public static void main(String[] args) {

        for (Database db : Data.instance.databases) {
            // If there are missing ids set them
            for (Table t : db.tables) {
                if(t.id == 0) t.id = idCounter.getAndIncrement();
                for (Column c : t.columns) {
                    if(c.id == 0) c.id = idCounter.getAndIncrement();
                }
            }

            // If there are missing changes add them (which might happen when importing databases generated by older jSQL-Gen versions).
            // For example if the table contains a column, but there is no change referencing that column
            for (Table t : db.tables) {
                if(t.changes.isEmpty()){
                    TableChange currentTableChange = GetTableChange.get(t, Data.instance.databases);
                    t.changes.add(currentTableChange);
                }
                for (Column col : t.columns) {
                    boolean isAddedOnce = false;
                    for (TableChange c : t.changes) {
                        if(c.addedColumnNames.contains(col.name)) {
                            isAddedOnce = true;
                            break;
                        }
                    }
                    boolean isRenamedOnce = false;
                    for (TableChange c : t.changes) {
                        if(c.newColumnNames.contains(col.name)) {
                            isRenamedOnce = true;
                            break;
                        }
                    }
                    if(!isAddedOnce && !isRenamedOnce){
                        TableChange firstChange = t.changes.get(0);
                        firstChange.addedColumnNames.add(col.name);
                        firstChange.addedColumnDefinitions.add(col.definition);
                    }
                }
            }

            // Cache current data
            JavaCodeGenerator.oldDatabases.add(db.duplicate());
        }

        MainApplication.main(args);
    }
}
